require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/outcomes', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Outcome. As you add validations to Outcome, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      login_as(FactoryBot.create(:admin))
      FactoryBot.create(:outcome)
      get outcomes_path
      expect(response).to be_successful
    end
  end

  # describe 'GET /show' do
  #   it 'renders a successful response' do
  #     outcome = FactoryBot.create(:outcome)
  #     get outcome_url(outcome)
  #     expect(response).to be_successful
  #   end
  # end

  describe 'GET /new' do
    it 'renders a successful response' do
      login_as(FactoryBot.create(:admin))
      get new_outcome_path
      expect(response).to be_successful
    end
  end

  # describe 'GET /edit' do
  #   it 'renders a successful response' do
  #     login_as(FactoryBot.create(:admin))
  #     outcome = FactoryBot.create(:outcome)
  #     get edit_outcome_path
  #     expect(response).to be_successful
  #   end
  # end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Outcome' do
        expect do
          FactoryBot.create(:outcome)
        end.to change(Outcome, :count).by(1)
      end

    #   it 'redirects to the created outcome' do
    #     post outcomes_url, params: { outcome: valid_attributes }
    #     expect(response).to redirect_to(outcome_url(Outcome.last))
    #   end
    # end

    # context 'with invalid parameters' do
    #   it 'does not create a new Outcome' do
    #     expect do
    #       post outcomes_url, params: { outcome: invalid_attributes }
    #     end.to change(Outcome, :count).by(0)
    #   end

    #   it "renders a successful response (i.e. to display the 'new' template)" do
    #     post outcomes_url, params: { outcome: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    end
  end

#   describe 'PATCH /update' do
#     context 'with valid parameters' do
#       let(:new_attributes) do
#         skip('Add a hash of attributes valid for your model')
#       end

#       it 'updates the requested outcome' do
#         outcome = Outcome.create! valid_attributes
#         patch outcome_url(outcome), params: { outcome: new_attributes }
#         outcome.reload
#         skip('Add assertions for updated state')
#       end

#       it 'redirects to the outcome' do
#         outcome = Outcome.create! valid_attributes
#         patch outcome_url(outcome), params: { outcome: new_attributes }
#         outcome.reload
#         expect(response).to redirect_to(outcome_url(outcome))
#       end
#     end

#     context 'with invalid parameters' do
#       it "renders a successful response (i.e. to display the 'edit' template)" do
#         outcome = Outcome.create! valid_attributes
#         patch outcome_url(outcome), params: { outcome: invalid_attributes }
#         expect(response).to be_successful
#       end
#     end
#   end

#   describe 'DELETE /destroy' do
#     it 'destroys the requested outcome' do
#       outcome = Outcome.create! valid_attributes
#       expect do
#         delete outcome_url(outcome)
#       end.to change(Outcome, :count).by(-1)
#     end

#     it 'redirects to the outcomes list' do
#       outcome = Outcome.create! valid_attributes
#       delete outcome_url(outcome)
#       expect(response).to redirect_to(outcomes_url)
#     end
#   end
end
