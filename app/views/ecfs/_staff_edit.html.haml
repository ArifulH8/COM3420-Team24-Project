= javascript_pack_tag "staff_edit"
%h1= "Edit ECF ##{@ecf.id}"
.row.justify-content-center
  .login-wrap.py-5
    %h4 Student Details
    .table-responsive
      %table.table
        %thead
          %tr
            %th{:scope => "col"} Username:
            %th{:scope => "col"} First Name:
            %th{:scope => "col"} Last Name:
            %th{:scope => "col"} Email
            %th{:scope => "col"} Department:
        %tbody
          %tr
            %th{:scope => "row"}
              = @ecf.user.uid
            %td= @ecf.user.givenname
            %td= @ecf.user.sn
            %td= @ecf.user.mail
            %td= @ecf.user.ou
    
    - if current_user.role == "admin" && @ecf.highly_sensitive
      %br
      .h4
        .confidential-warning
          %b THIS ECF IS HIGHLY SENSITIVE - the following details must be kept confidential!
      %br

    %br
    %h4 ECF Details
    %p
      %b ECF Status:
      %br
      = simple_form_for(@ecf, :url => update_persist_ecf_path(@ecf), :defaults => { :input_html => { :class => "cursor_hover" } }) do |f|
        = f.select :status, options_for_select(["Pending", "Complete"], @ecf.status)
        = f.button :submit, value: 'Update status',class: 'btn btn-outline-primary btn-sm ml-5'

    - if @ecf.highly_sensitive
      - if current_user.role == "student" || current_user.role == "admin"
        = render "staff_edit_sensitive_info"
      - else
        .alert.alert-warning Ecf has highly sensitive information, which can only be viewed by Scrutiny chair.
    - else
      = render "staff_edit_sensitive_info"
      
    %p
      %br
      %a{ :name => "affected-units" }
      %h4 Affected Units:
      - if @ecf.affected_units.empty?
        .text-note
          No affected units to view.
      - else
        %table.table
          %thead
            %tr
              %th{:scope => "col"} Module Code
              %th{:scope => "col"} Assessment type
              %th{:scope => "col"} Requested Action
              %th{:scope => "col"} Affected from:
              %th{:scope => "col"} Affected to:
              %th{:scope => "col"} Outcome:
              %th{:scope => "col"} Meeting:
          %tbody
            - @ecf.affected_units.each do |affected_unit|
              %tr
                %td= affected_unit.unit_code
                %td= affected_unit.assessment_type
                %td= affected_unit.requested_action
                %td= affected_unit.date_from
                %td= affected_unit.date_to
                = simple_form_for :decision, :url => '/decisions' do |g|
                  %td
                    = g.input :outcome_id, as: :select, collection: Outcome.all, label: false
                    = g.hidden_field :module_code,value: affected_unit.unit_code
                    = g.hidden_field :assessment_type, value: affected_unit.assessment_type
                    = g.hidden_field :requested_action, value: affected_unit.requested_action
                    - if affected_unit.requested_action.include?("DEX")
                      Extension date:
                      = g.date_field :extension_date
                    - else
                      = g.hidden_field :extension_date, as: :date, value: DateTime.now
                  %td
                    - unless @ecf.agendas.empty?
                      = g.input :agenda_id, as: :select, collection: @agendas, :label_method => lambda {|agenda| agenda.meeting.title}, label: false, selected: @agenda.id
                      %td= g.button :submit, value: 'Add decision', class: 'btn btn-outline-primary btn-sm'
                    - else
                      %i No meetings to add decisions for.


    %p
      %br
      %h4 Student notes
      = simple_form_for(@ecf, :url => update_persist_ecf_path(@ecf), :defaults => { :input_html => { :class => "cursor_hover " } }) do |f|
        = link_to_add_nested(f, :ecf_notes, '#ecf-notes-student', partial: 'ecf_notes/ecf_note_student_fields') do
          %button + Add a Student note

        #ecf-notes-student

      - if @ecf_notes_grouped[1].nil?
        %i There are currently no student notes.
      - else
        - @ecf_notes_grouped[1].each do |ecf_note|
          %p
            %b Note:
            = ecf_note.description
            %br
              %i.some{:style => "color:dimgrey"}
                %b Submitted by:
                = "#{ecf_note.user.givenname} #{ecf_note.user.sn}, "
                %b Note created at:
                = ecf_note.created_at
                - if ecf_note.user_id == current_user.id
                  = link_to "Delete note", ecf_note_path(ecf_note), method: :delete

    %p
      %h4 Module leader notes
      = simple_form_for(@ecf, :url => update_persist_ecf_path(@ecf), :defaults => { :input_html => { :class => "cursor_hover" } }) do |f|
        = link_to_add_nested(f, :ecf_notes, '#ecf-notes-module-leader', partial: 'ecf_notes/ecf_note_module_leader_fields',link_classes: "mt-5") do
          %button + Add a Module Leader note

        #ecf-notes-module-leader

      - if @ecf_notes_grouped[2].nil?
        %i There are currently no module leader notes.
      - else
        - @ecf_notes_grouped[2].each do |ecf_note|
          %p
            %b Note:
            = ecf_note.description
            %br
              %i.some{:style => "color:dimgrey"}
                %b Submitted by:
                = "#{ecf_note.user.givenname} #{ecf_note.user.sn}, "
                %b Note created at:
                = ecf_note.created_at
                - if ecf_note.user_id == current_user.id
                  = link_to "Delete note", ecf_note_path(ecf_note), method: :delete

    %p
      %h4 Scrutiny panel notes
      = simple_form_for(@ecf, :url => update_persist_ecf_path(@ecf), :defaults => { :input_html => { :class => "cursor_hover" } }) do |f|
        = link_to_add_nested(f, :ecf_notes, '#ecf-notes-scrutiny', partial: 'ecf_notes/ecf_note_scrutiny_fields') do
          %button + Add a Scrutiny Panel note

        #ecf-notes-scrutiny

      - if @ecf_notes_grouped[3].nil?
        %i There are currently no scrutiny panel notes.
      - else
        - @ecf_notes_grouped[3].each do |ecf_note|
          %p
            %b Note:
            = ecf_note.description
            %br
              %i.some{:style => "color:dimgrey"}
                %b Submitted by:
                = "#{ecf_note.user.givenname} #{ecf_note.user.sn}, "
                %b Note created at:
                = ecf_note.created_at
                - if ecf_note.user_id == current_user.id
                  = link_to "Delete note", ecf_note_path(ecf_note), method: :delete

    %p
      %h4 Scrutiny chair notes
      = simple_form_for(@ecf, :url => update_persist_ecf_path(@ecf), :defaults => { :input_html => { :class => "cursor_hover" } }) do |f|
        = link_to_add_nested(f, :ecf_notes, '#ecf-notes-admin', partial: 'ecf_notes/ecf_note_admin_fields') do
          %button#add_note + Add a Scrutiny Chair note

        #ecf-notes-admin

      - if @ecf_notes_grouped[4].nil?
        %i There are currently no module leader notes.
      - else
        - @ecf_notes_grouped[4].each do |ecf_note|
          %p
            %b Note:
            = ecf_note.description
            %br
              %i.some{:style => "color:dimgrey"}
                %b Submitted by:
                = "#{ecf_note.user.givenname} #{ecf_note.user.sn}, "
                %b Note created at:
                = ecf_note.created_at
                - if ecf_note.user_id == current_user.id
                  = link_to "Delete note", ecf_note_path(ecf_note), method: :delete, class: "btn btn-outline-danger btn-sm"
    
    - if (@ecf.highly_sensitive and current_user.admin?) or !@ecf.highly_sensitive
      %br
      %h4 Uploaded email conversations
      - if @ecf.upload_conversations.size == 0
        .text-note
          No conversations have been uploaded.
      - else
        - @ecf.upload_conversations.each do |conversation|
          %p
          = link_to conversation.filename, conversation, target: :_blank
      = simple_form_for(@ecf, :defaults => { :input_html => { :class => "cursor_hover" } }) do |f|
        = f.label :upload_conversations
        = f.file_field :upload_conversations, multiple: true, accept: 'application/pdf'
        = f.button :submit, value: "Upload email conversation(s)"